#!/usr/bin/env python
# vim: ft=python
"""
=head1 NAME

Zorp service rate average 1 - Plugin to monitor the average rate of services in Zorp

=head1 CONFIGURATION

No configuration

=head1 AUTHOR

Marcell Kresz

=head1 LICENSE

GNU GPL

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf
"""

import sys

from zorpctl.Munin import *
from zorpctl.Instances import InstanceHandler

if len(sys.argv) > 1:
    if sys.argv[1] == "autoconf":
        print("yes")

    if sys.argv[1] == "config":
        print('graph_title Average Rate of services 1min')
        print('graph_vlabel average rate of services')
        print('graph_category zorp')
        print('graph_info This graph shows the 1min average rate of running services in Zorp.')
        services = {}
        for instance in RunningInstances():
            results = InstanceHandler.executeAlgorithmOnInstanceProcesses(instance, GetServicesAlgorithm())
            for result in results:
                if result:
                    for service in result.value.keys():
                        services[service] = None
        for service in services.keys():
            print("%s.label %s" % (service, service))
else:
    """
    Minus one return value indicates error!
    """
    average1 = {}
    for instance in RunningInstances():
        results = InstanceHandler.executeAlgorithmOnInstanceProcesses(instance, GetServiceRateAlgorithm())
        for result in results:
            if result:
                for service in result.value.keys():
                    if service in average1:
                        average1[service] += result.value[service]["avg1"]
                    else:
                        average1[service] = result.value[service]["avg1"]
        
        for service in average1:
            print("%s.value %d" % (service, average1[service] / instance.number_of_processes))
