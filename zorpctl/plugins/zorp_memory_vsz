#!/usr/bin/env python
# vim: ft=python
"""
=head1 NAME

Zorp memory vsz - Plugin to monitor the memory vsz of Zorp instances

=head1 CONFIGURATION

No configuration

=head1 AUTHOR

Marcell Kresz

=head1 LICENSE

GNU GPL

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf
"""

import sys

from zorpctl.PluginAlgorithms import *
from zorpctl.Instances import InstanceHandler

if len(sys.argv) > 1:
    if sys.argv[1] == "autoconf":
        print("yes")

    if sys.argv[1] == "config":
        print('graph_title Memory vsz')
        print('graph_vlabel memory vsz')
        print('graph_category zorp')
        print('graph_info This graph shows the memory vsz of running instances in Zorp.')
        for instance in RunningInstances():
            print("%s.label %s" % (instance.name, instance.name))
else:
    """
    Minus one return value indicates error!
    """
    for instance in RunningInstances():
        results_of_memory_vsz = InstanceHandler.executeAlgorithmOnInstanceProcesses(instance, GetMemoryVSZAlgorithm())
        sum_of_memoryvsz = 0
        for memory_vsz in results_of_memory_vsz:
            if memory_vsz:
                sum_of_memoryvsz += memory_vsz.value
            else:
                sum_of_memoryvsz = None
                break
        algorithm = GetThreadsRunningAlgorithm()
        algorithm.setInstance(instance)
        threads = algorithm.run()
        if threads and sum_of_memoryvsz != None:
            print("%s.value %d" % (instance.name, sum_of_memoryvsz / threads.value))
        else:
            print("%s.value -1" % instance.name)

